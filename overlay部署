## 1. 准备工作

### 1.1 安装centos7 64bit
Centos 7 64bit Minimal镜像安装, [下载地址](http://mirrors.tuna.tsinghua.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1611.iso)

sha256: 27bd866242ee058b7a5754e83d8ee8403e216b93d130d800852a96f41c34d86a

系统安装尽量选择默认`英文`语言进行安装  

### 1.2 基本设置
```bash
# 主机名设置, 根据实际角色设定, 比如`controller` `node1`
echo "node1" > /etc/hostname

# 关闭selinux
setenforce 0
sed -i '/^SELINUX=/cSELINUX=disabled' /etc/selinux/config
```

#### 1.3 安装依赖包和4.6内核
```bash
# 安装csphere yum repo
curl -Ss https://download.csphere.cn/public/yum/centos/7/x86_64/csphere.repo > /etc/yum.repos.d/csphere.repo
yum repolist csphere

# 安装依赖的软件包:
yum -y --disablerepo='*' --enablerepo=csphere install bridge-utils net-tools psmisc subversion git fuse ntp rng-tools bash-completion

# 安装4.6.0内核:
yum -y --disablerepo='*' --enablerepo=csphere install kernel-ml-4.6.0 iproute

# 使用新内核启动:
grub2-set-default 0
reboot
```

重启完成后，通过`uname -r` 查看内核版本是不是4.6

注：  
如果服务器所在网络连不上公网，可以把整个yum repo目录下载到本地再上传到服务器：
```bash
wget --cut-dirs=1 -P csphererepo -r -np -nH -R "index.html*" https://download.csphere.cn/public/yum/centos/7/x86_64/

# 在服务器上创建一个本地的repo配置, 使用下载下来的repo目录
# 假设repo目录的路径为: `/root/csphererepo/`
cat<<-EOS>/etc/yum.repos.d/csphere.repo 
[csphere]
name=csphere local repo
baseurl=file:///root/csphererepo/yum/centos/7/x86_64/
gpgcheck=0
enabled=1
EOS

# 然后如上面步骤的yum命令安装所需的依赖包和4.6内核
```

### 1.4 Docker数据分区
需要一个`单独的数据分区`存放docker数据, 并使用参数`-n ftype=1`格式化为xfs文件系统, 否则在4.6内核上无法正常创建容器  
该分区还要使用参数`prjquota`挂载， 否则无法正常使用容器的磁盘空间配额功能。  
假设分区设备名为/dev/vdb1, 操作如下:
```bash
mkfs.xfs -n ftype=1 /dev/vdb1 
mkdir /docker-data/
```

> 说明:
> 应该尽量使用UUID来挂载磁盘, 尤其是在云平台上部署的时候, 防止重启后设备名变化导致系统无法启动.
> 可以通过目录`/dev/disk/by-uuid/`或`tune2fs`命令查看对应设备的UUID.

```bash
echo "UUID=af414ad8-9936-46cd-b074-528854656fcd /docker-data xfs defaults,prjquota 0 0" >> /etc/fstab

mount -a
mkdir -p /docker-data/docker
ln -sv /docker-data/docker /var/lib/docker
```


## 2. 部署安装Controller:

### 2.1 安装
```bash
rpm -ivh csphere-controller-1.4.4-rhel7.x86_64.rpm 
```

### 2.2 初始化controller参数
设置集群数量, web端口

```
Role=controller ClusterSize=1 Port=80 MongoRepl=NO csphere_init
```

参数说明:

- `Port`:    管理页面HTTP服务端口
- `ClusterSize`:  Etcd集群大小, 此处设置的值就是Agent最小的安装数目. 如ClusterSize=3,则最少需要安装3台Agent来完成Etcd集群初始化.


### 2.3 启动controller
```bash
cspherectl  start
```
然后登陆到页面上, 设置 -> license, 填入一个企业版license, 并生成一个4位的COS安装验证码


## 3. 部署安装Agent:
说明: 如果安装主控的时候, 设置的`ClusterSize`值是多少, 则Agent首次部署就至少需要安装`ClusterSize`台.

### 3.1  建立br0网桥  
**如果容器使用bridge网络则此步骤必须, ipvlan网络可跳过**



```bash
cd /etc/sysconfig/network-scripts
cat <<-EOS>ifcfg-br0 
DEVICE=br0
TYPE=Bridge
ONBOOT=yes
IPADDR=192.168.122.12   # IP地址,根据实际填写
NETMASK=255.255.255.0   # 掩码
GATEWAY=192.168.122.1   # 默认网关 
DNS1=192.168.122.1      # 主DNS
BOOTPROTO=static
NM_CONTROLLED=no
EOS

# 假设物理网卡名为 eno16777736
cat <<-EOS>ifcfg-eno16777736
TYPE=Ethernet
DEVICE=eno16777736
NAME=eno16777736
ONBOOT=yes
BRIDGE=br0
NM_CONTROLLED=no
EOS

# 重启系统
reboot
```

然后重新登录机器，执行以下命令确认网络配置是否正确：

```bash
ifconfig br0           # 确认IP地址在br0上
brctl show br0         # 物理网卡被连接到br0
```

### 3.2 安装Agent
```bash
rpm -ivh csphere-agent-1.4.4-rhel7.x86_64.rpm 
```

### 3.3 初始化Agent参数:
可以使用`ipvlan`或者`bridge`网络模式初始化， 请选择一种进行操作：
```bash
# 使用bridge模式初始化：
Role=agent ControllerAddr=192.168.122.10:80 InstCode=6906 NetMode=bridge BridgeName=br0 DockerGW=192.168.122.1 csphere_init

#或者 使用ipvlan模式初始化：
Role=agent ControllerAddr=192.168.122.10:80 InstCode=6906 NetMode=ipvlan InetDev=eth0 DockerGW=192.168.122.1 csphere_init
```

参数说明:

- `ControllerAddr`:  主控中心的地址:端口.
- `InstCode`:  安装码, 到主控中心页面上生成
- `NetMode`:   Docker容器网络模式, ipvlan或bridge
- `InetDev`:   物理网卡名, 只有ipvlan才需要这个参数
- `BridgeName`: 如果使用bridge网络，可以通过此参数指定网桥接口的名称。默认为br0
- `DockerGW`: 如果容器网络的网关与宿主机的网关地址不一致，需要通过此参数指定容器网络的网关。如果不指定此参数，会使用宿主机的默认网关作为容器网络的网关。


### 3.4 启动Agent:
```bash
cspherectl  start
```
说明: 如果NetMode=ipvlan的话, `docker`会启动失败, 继续执行:
```bash
net-plugin ip-range  --ip-start=172.17.0.1/24 --ip-end=172.17.0.254/24
```
过一会就可以在主控页面上看到节点上线.



### 3.5 设置容器使用的IP地址范围:
如不设置无法正常启动容器.
```bash
# 根据实际IP范围设定容器的IP地址池分配
net-plugin ip-range  --ip-start=192.168.122.30/24 --ip-end=192.168.122.50/24
```
